ScrollView  
  @Override
    public boolean isInAbsoluteStart() {
        return !mView.canScrollVertically(-1);
    }

    @Override
    public boolean isInAbsoluteEnd() {
        return !mView.canScrollVertically(1);
    }
	

垂直 mRecyclerView 	
	  @Override
        public boolean isInAbsoluteStart() {
            return !mRecyclerView.canScrollHorizontally(-1);
        }

        @Override
        public boolean isInAbsoluteEnd() {
            return !mRecyclerView.canScrollHorizontally(1);
        }
水平 mRecyclerView 			
		  @Override
        public boolean isInAbsoluteStart() {
            return !mRecyclerView.canScrollVertically(-1);
        }

        @Override
        public boolean isInAbsoluteEnd() {
            return !mRecyclerView.canScrollVertically(1);
        }
AbsListView
 @Override
    public boolean isInAbsoluteStart() {
        return mView.getChildCount() > 0 && !canScrollListUp();
    }

    @Override
    public boolean isInAbsoluteEnd() {
        return mView.getChildCount() > 0 && !canScrollListDown();
    }

    public boolean canScrollListUp() {
        // Ported from AbsListView#canScrollList() which isn't compatible to all API levels
        final int firstTop = mView.getChildAt(0).getTop();
        final int firstPosition = mView.getFirstVisiblePosition();
        return firstPosition > 0 || firstTop < mView.getListPaddingTop();
    }

    public boolean canScrollListDown() {
        // Ported from AbsListView#canScrollList() which isn't compatible to all API levels
        final int childCount = mView.getChildCount();
        final int itemsCount = mView.getCount();
        final int firstPosition = mView.getFirstVisiblePosition();
        final int lastPosition = firstPosition + childCount;
        final int lastBottom = mView.getChildAt(childCount - 1).getBottom();
        return lastPosition < itemsCount || lastBottom > mView.getHeight() - mView.getListPaddingBottom();
    }
HorizontalScrollView
	 @Override
    public boolean isInAbsoluteStart() {
        return !mView.canScrollHorizontally(-1);
    }

    @Override
    public boolean isInAbsoluteEnd() {
        return !mView.canScrollHorizontally(1);
    }

